% ************************************************************************
% Function: metaModelPredictions
% Purpose:  Generate meta model predictions
%
% Parameters:
%       metaModel: model generated by fitMetaModels
% Outputs:
%       predTbl: generated table of predictions
%
% ************************************************************************

function predTbl = metaModelPredictions( metaModel, type )



% get coefficient names
cNames = metaModel.CoefficientNames;

% extract the landmark registration coefficients
isLMReg = (extractBefore(cNames, 6) == "RegLM" & ~contains(cNames, ":")); 

% define the range of LM registrations, adding no registration
LMRegistrations = extractBetween( cNames(isLMReg), 7, 10 );
LMRegistrations = ["0000" LMRegistrations];

% define other variables
CRegistrations = ["-", "C"];
Sets = ["Train", "Test"];
Features = ["PCA", "ACP"];
Rotations = ["Unrotated", "Varimax"];
Methods = ["PAD", "LTN"];

% generate tables
switch type

    case 'Features'

        % get input data structure
        nRows = 8;
        inputTbl = metaModel.Variables( 1:nRows, : );
        % remove outcome variable
        inputTbl.Outcome = [];

        % set constants
        inputTbl.Set = repmat( "Test", nRows, 1 );
        inputTbl.RegLM = repmat( "0000", nRows, 1 );
        inputTbl.RegC = repmat( "-", nRows, 1 );

        % iterate through variable settings
        m = 0;
        for i = 1:length(Methods)
            for j = 1:length(Features)
                for k = 1:length(Rotations)
                    m = m+1;
                    inputTbl{ m, 2 } = Methods(i);
                    inputTbl{ m, 3 } = Features(j);
                    inputTbl{ m, 4 } = Rotations(k);
                end
            end
        end

        % get predictions
        preds = predict( metaModel, inputTbl );
        
        % setup prediction table
        predTbl = array2table( reshape( preds, 4, 2 ) );
        predTbl.Properties.VariableNames = ["PAD" "LTN"];
        predTbl.Properties.RowNames = ["PCAU" "PCAV" "ACPU" "ACPV"];




    case 'Regs'

        % setup prediction table
        nRows = 4*length(LMRegistrations);

        % get input data structure
        inputTbl = metaModel.Variables( 1:nRows, : );
        % remove outcome variable
        inputTbl.Outcome = [];

        % set constants
        inputTbl.Set = repmat( "Test", nRows, 1 );
        inputTbl.Rotation = repmat( "Unrotated", nRows, 1 );
        inputTbl.RegC = repmat( "-", nRows, 1 );

        % iterate through variable settings
        m = 0;
        for i = 1:length(Methods)
            for j = 1:2
                for k = 1:length(LMRegistrations)
                    m = m+1;
                    inputTbl{ m, 2 } = Methods(i);
                    inputTbl{ m, 3 } = Features(j);
                    inputTbl{ m, 4 } = Rotations(j);
                    inputTbl{ m, 5 } = LMRegistrations(k);
                end
            end
        end

        % get predictions
        preds = predict( metaModel, inputTbl );

        % setup prediction table
        predTbl = array2table( reshape( preds, 4, 16 ) );
        predTbl.Properties.VariableNames = LMRegistrations;
        predTbl.Properties.RowNames = ...
            ["PAD+PCAU" "PAD+ACPV" "LTN+PCAU" "LTN+ACPV"];



end





end


